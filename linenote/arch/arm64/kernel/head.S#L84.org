* 목차 :toc:
- [[#개요][개요]]
- [[#정리][정리]]

* 개요

=head.S= 파일에 왜 이렇게 복잡한 매크로를 사용하고 있는지는 모르겠지만 여러 매크로들을 풀어보면 아래와 같다.

1. SYM_CODE_START(primary_entry)

#+begin_src c
#define SYM_CODE_START(name)				\
	SYM_START(name, SYM_L_GLOBAL, SYM_A_ALIGN)
#+end_src

2. SYM_START(primary_entry, SYM_L_GLOBAL, SYM_A_ALIGN)

#+begin_src c
#define SYM_START(name, linkage, align...)		\
	SYM_ENTRY(name, linkage, align)
#+end_src

3. SYM_ENTRY(primary_entry, SYM_L_GLOBAL, SYM_A_ALIGN)

#+begin_src c
#define SYM_ENTRY(name, linkage, align...)		\
	linkage(name) ASM_NL				\
	align ASM_NL					\
	name:
#+end_src

4.

SYM_L_GLOBAL(primary_entry) ASM_NL
align ASM_NL
primary_entry:

5. 최종 형태

.global primary_entry
align;
primary_entry:

* 정리

즉, SYM_CODE_START(primary_entry)는 아래 어셈블리 코드와 동일하다.

#+begin_src asm
.global primary_entry
align;
primary_entry:
#+end_src

- .global primary_entry: 이 directive는 =primary_entry= 심볼을 전역적으로 접근 가능하도록 만든다. 즉, 다른 파일이나 모듈에서 reference 할 수 있다.
- align: 앞서 언급됐듯이 최적화를 위해 memory boundary를 설청한다.
- primary_entry: 레이블을 정의한다. processor (core)는 레이블로 점프할 수 있다.
